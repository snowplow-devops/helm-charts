{{- if eq (include "iglu.service.config.database.type" .) "postgres" }}

{{- if .Values.hooks.deploySetupHooks }}

{{- if or .Values.hooks.deployDB .Values.hooks.deployDBUser }}

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "iglu.hooks.name" . }}-db-init-hook
  labels:
    {{- include "snowplow.labels" $ | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
    "helm.sh/hook-weight": "1"
spec:
  template:
    metadata:
      name: {{ include "iglu.hooks.name" . }}-db-init-hook
    spec:
      restartPolicy: Never
      containers:
      - name: {{ include "iglu.hooks.name" . }}-db-init-hook
        image: postgres:15-alpine
        imagePullPolicy: Always
        command: ["/bin/bash", "-c"]
        args:
          - |
            export PGPASSWORD="${CONFIG_FORCE_iglu_database_admin_password}"
            {{- if .Values.hooks.deployDBUser }}
            echo "Creating ${CONFIG_FORCE_iglu_database_username} user"
            {{ include "iglu.hooks.psql.connection" . }} \
                -d "${CONFIG_FORCE_iglu_database_default_dbname}" \
                -c "CREATE USER \"${CONFIG_FORCE_iglu_database_username}\" WITH PASSWORD '${CONFIG_FORCE_iglu_database_password}';" && echo "OK"
            {{- else }}
            echo "Skipping ${CONFIG_FORCE_iglu_database_username} user creation as it is expected to exist already"
            {{- end }}
            {{- if .Values.hooks.deployDB }}
            echo "Creating ${CONFIG_FORCE_iglu_database_dbname} database"
            {{ include "iglu.hooks.psql.connection" . }} \
                -d "${CONFIG_FORCE_iglu_database_default_dbname}" \
                -c "CREATE DATABASE \"${CONFIG_FORCE_iglu_database_dbname}\" WITH OWNER \"${CONFIG_FORCE_iglu_database_username}\";" && echo "OK"
            {{- else }}
            echo "Skipping ${CONFIG_FORCE_iglu_database_dbname} database creation as it is expected to exist already"
            {{- end }}
            {{- if .Values.hooks.deployDBUserGrants }}
            echo "Granting privileges to ${CONFIG_FORCE_iglu_database_username} user"
            {{ include "iglu.hooks.psql.connection" . }} \
                 -d "${CONFIG_FORCE_iglu_database_dbname}" \
                 -c "GRANT ALL PRIVILEGES ON DATABASE \"${CONFIG_FORCE_iglu_database_dbname}\" TO \"${CONFIG_FORCE_iglu_database_username}\"; GRANT USAGE, CREATE ON SCHEMA public TO \"${CONFIG_FORCE_iglu_database_username}\";"
            echo "OK"
            {{- end }}
        env:
        - name: "CONFIG_FORCE_iglu_database_admin_password"
          value: "{{ .Values.hooks.secrets.admin_password }}"
        - name: "CONFIG_FORCE_iglu_database_admin_username"
          value: "{{ .Values.hooks.secrets.admin_username }}"
        - name: "CONFIG_FORCE_iglu_database_default_dbname"
          value: "{{ .Values.hooks.defaultDBName }}"
        - name: "CONFIG_FORCE_iglu_database_host"
          value: "{{ .Values.service.config.database.host }}"
        - name: "CONFIG_FORCE_iglu_database_dbname"
          value: "{{ .Values.service.config.database.dbname }}"
        - name: "CONFIG_FORCE_iglu_database_port"
          value: "{{ .Values.service.config.database.port }}"
        - name: "CONFIG_FORCE_iglu_database_username"
          value: "{{ .Values.service.config.database.secrets.username }}"
        - name: "CONFIG_FORCE_iglu_database_password"
          value: "{{ .Values.service.config.database.secrets.password }}"
        envFrom:
        - secretRef:
            name: {{ include "iglu.app.secret.name" . }}
{{- end }}

---

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "iglu.hooks.name" . }}
  labels:
    {{- include "snowplow.labels" $ | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
    "helm.sh/hook-weight": "2"  
spec:
  template:
    metadata:
      name: {{ include "iglu.hooks.name" . }}
    spec:
      restartPolicy: Never
      containers:
      - name: {{ include "iglu.hooks.name" . }}
        image: {{ .Values.service.image.repository}}:{{ .Values.service.image.tag }}
        imagePullPolicy: Always
        args:
        - "setup"
        env:
        {{- range $k, $v := .Values.service.config.env }}
        - name: "{{ $k }}"
          value: "{{ $v }}"
        {{- end }}
        - name: "JDK_JAVA_OPTIONS"
          value: "-Dconfig.override_with_env_vars=true"
        {{- if .Values.service.gcp.deployProxy }}
        - name: "CONFIG_FORCE_iglu_database_host"
          value: {{ include "iglu.cloudsqlproxy.host" . }}
        - name: "CONFIG_FORCE_iglu_database_port"
          value: "{{ .Values.service.gcp.proxy.port }}"
        {{- else }}
        - name: "CONFIG_FORCE_iglu_database_host"
          value: "{{ .Values.service.config.database.host }}"
        - name: "CONFIG_FORCE_iglu_database_port"
          value: "{{ .Values.service.config.database.port }}"
        {{- end }}
        - name: "CONFIG_FORCE_iglu_database_dbname"
          value: "{{ .Values.service.config.database.dbname }}"
        envFrom:
        - secretRef:
            name: {{ include "iglu.app.secret.name" . }}
{{- end }}

---

{{- if .Values.hooks.deployDestroyHooks }}

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "iglu.hooks.name" . }}-db-destroy-hook
  labels:
    {{- include "snowplow.labels" $ | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
    "helm.sh/hook-weight": "1"
spec:
  template:
    metadata:
      name: {{ include "iglu.hooks.name" . }}-db-destroy-hook
    spec:
      restartPolicy: Never
      containers:
      - name: {{ include "iglu.hooks.name" . }}-db-destroy-hook
        image: postgres:15-alpine
        imagePullPolicy: Always
        command: ["/bin/bash", "-c"]
        args:
          - |
            export PGPASSWORD="${CONFIG_FORCE_iglu_database_admin_password}"
            {{- if or .Values.hooks.destroyDB .Values.hooks.destroyDBUser }}
            echo "Destroying database resources"
            {{- if .Values.hooks.destroyDB }}
            {{ include "iglu.hooks.psql.connection" . }} \
                -d "${CONFIG_FORCE_iglu_database_default_dbname}" \
                -c "ALTER DATABASE \"${CONFIG_FORCE_iglu_database_dbname}\" OWNER TO \"${CONFIG_FORCE_iglu_database_admin_username}\";"
            {{ include "iglu.hooks.psql.connection" . }} \
                -d "${CONFIG_FORCE_iglu_database_default_dbname}" \
                -c "DROP DATABASE \"${CONFIG_FORCE_iglu_database_dbname}\" WITH (FORCE);"
            {{- end }}
            {{- if .Values.hooks.destroyDBUser }}
            {{ include "iglu.hooks.psql.connection" . }} \
                -d "${CONFIG_FORCE_iglu_database_default_dbname}" \
                -c "DROP USER \"${CONFIG_FORCE_iglu_database_username}\";"
            {{- end }}
            echo "OK"
            {{- else }}
            echo "Skipping database and user destruction"
            {{- end }}
        env:
        - name: "CONFIG_FORCE_iglu_database_admin_password"
          value: "{{ .Values.hooks.secrets.admin_password }}"
        - name: "CONFIG_FORCE_iglu_database_admin_username"
          value: "{{ .Values.hooks.secrets.admin_username }}"
        - name: "CONFIG_FORCE_iglu_database_default_dbname"
          value: "{{ .Values.hooks.defaultDBName }}"
        - name: "CONFIG_FORCE_iglu_database_host"
          value: "{{ .Values.service.config.database.host }}"
        - name: "CONFIG_FORCE_iglu_database_dbname"
          value: "{{ .Values.service.config.database.dbname }}"
        - name: "CONFIG_FORCE_iglu_database_port"
          value: "{{ .Values.service.config.database.port }}"
        - name: "CONFIG_FORCE_iglu_database_username"
          value: "{{ .Values.service.config.database.secrets.username }}"
        envFrom:
        - secretRef:
            name: {{ include "iglu.app.secret.name" . }}
{{- end }}

{{- end }}