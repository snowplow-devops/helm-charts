apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "app.fullname" . }}
spec:
  {{- if .Values.deployment.scaleToZero }}
  replicas: 0
  {{- end }}
  selector:
    matchLabels:
      app: {{ include "app.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ include "app.fullname" . }}
        {{- if eq .Values.global.cloud "azure" }}
        azure.workload.identity/use: "true"
        {{- end }}
      annotations:
        {{- if .Values.configMaps }}
        {{- range $v := .Values.configMaps }}
        {{- range $f := $v.files }}
        {{- if $f.contentsB64 }}
        checksum/{{ $v.name }}-{{ $f.key }}: "{{ $f.contentsB64 | sha256sum }}"
        {{- else }}
        checksum/{{ $v.name }}-{{ $f.key }}: "{{ $f.contentsFile | sha256sum }}"
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
    spec:
      {{- if .Values.cloudserviceaccount.deploy }}
      serviceAccountName: {{ .Values.cloudserviceaccount.name }}
      {{- end }}
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}

      {{- if not .Values.image.isRepositoryPublic }}
      imagePullSecrets:
      - name: {{ .Values.dockerconfigjson.name }}
      {{- end }}

      {{- if .Values.configMaps }}
      volumes:
      {{- range $v := .Values.configMaps }}
      - configMap:
          name: {{ $v.name }}
          optional: false
        name: {{ $v.name }}
      {{- end }}
      {{- end }}

      containers:
      - name: "{{ include "app.fullname" . }}"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ default "IfNotPresent" .Values.image.pullPolicy }}

        {{- if .Values.config.command }}
        command:
        {{- range $v := .Values.config.command }}
        - "{{ $v }}"
        {{- end }}
        {{- end }}

        {{- if .Values.config.args }}
        args:
        {{- range $v := .Values.config.args }}
        - "{{ $v }}"
        {{- end }}
        {{- end }}

        {{- if .Values.config.env }}
        env:
        {{- range $k, $v := .Values.config.env }}
        - name: "{{ $k }}"
          value: "{{ $v }}"
        {{- end }}
        {{- end }}
        
        {{- if .Values.config.secrets  }}
        envFrom:
        - secretRef:
            name: {{ include "app.secret.fullname" . }}
        {{- end }}

        resources:
          {{- toYaml .Values.resources | nindent 10 }}

        {{- if or (ne .Values.readinessProbe.httpGet.path "") (.Values.readinessProbe.exec.command) }}
        readinessProbe:
          {{- if ne .Values.readinessProbe.httpGet.path "" }}
          httpGet:
            path: {{ .Values.readinessProbe.httpGet.path }}
            port: {{ .Values.service.port }}
            scheme: HTTP
          {{- end }}
          {{- if gt (len .Values.readinessProbe.exec.command) 0 }}
          exec:
            command:
          {{- range $v := .Values.readinessProbe.exec.command }}
            - {{ $v }}
          {{- end }}
          {{- end }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
        {{- end }}

        {{- if or (ne .Values.livenessProbe.httpGet.path "") (.Values.livenessProbe.exec.command) }}
        livenessProbe:
          {{- if ne .Values.livenessProbe.httpGet.path "" }}
          httpGet:
            path: {{ .Values.livenessProbe.httpGet.path }}
            port: {{ .Values.livenessProbe.httpGet.port }}
            scheme: HTTP
          {{- end }}
          {{- if gt (len .Values.livenessProbe.exec.command) 0 }}
          exec:
            command:
          {{- range $v := .Values.livenessProbe.exec.command }}
            - {{ $v }}
          {{- end }}
          {{- end }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
        {{- end }}

        {{- if .Values.configMaps }}
        volumeMounts:
        {{- range $v := .Values.configMaps }}
        - mountPath: "{{ $v.mountPath }}"
          {{- if $v.mountPropagation }}
          mountPropagation: {{ $v.mountPropagation }}
          {{- else }}
          mountPropagation: None
          {{- end }}
          name: {{ $v.name }}
        {{- end }}
        {{- end }}
